(self.webpackChunkrport_site=self.webpackChunkrport_site||[]).push([[610],{9228:(e,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>s});const s={key:"v-3d9da4af",path:"/docs/no02-api-auth.html",title:"API Authentication",lang:"en-DE",frontmatter:{},excerpt:"",headers:[{level:2,title:"Authentication Mechanisms",slug:"authentication-mechanisms",children:[{level:3,title:"HTTP Basic Auth",slug:"http-basic-auth",children:[]},{level:3,title:"Bearer Token Auth",slug:"bearer-token-auth",children:[]}]},{level:2,title:"Storing credentials, managing users",slug:"storing-credentials-managing-users",children:[{level:3,title:"Hardcoded single user",slug:"hardcoded-single-user",children:[]},{level:3,title:"User File",slug:"user-file",children:[]},{level:3,title:"Database",slug:"database",children:[]}]}],filePathRelative:"docs/no02-api-auth.md"}},5520:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>R});var s=a(6252);const t=(0,s.uE)('<h1 id="api-authentication"><a class="header-anchor" href="#api-authentication">#</a> API Authentication</h1><h2 id="authentication-mechanisms"><a class="header-anchor" href="#authentication-mechanisms">#</a> Authentication Mechanisms</h2><p>The Rportd API support two ways of authentication.</p><ol><li>HTTP Basic Auth</li><li>Bearer Token Auth</li></ol><h3 id="http-basic-auth"><a class="header-anchor" href="#http-basic-auth">#</a> HTTP Basic Auth</h3><p>The API claims to be REST compliant. Submitting credentials on each request using an HTTP basic auth header is therefore possible, for example</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>curl -s -u admin:foobaz http://localhost:3000/api/v1/clients|jq\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="bearer-token-auth"><a class="header-anchor" href="#bearer-token-auth">#</a> Bearer Token Auth</h3>',8),r=(0,s.Uk)("Using HTTP Basic auth you can request a token at "),o={href:"https://petstore.swagger.io/?url=https://raw.githubusercontent.com/cloudradar-monitoring/rport/master/api-doc.yml#/default/get_login",target:"_blank",rel:"noopener noreferrer"},l=(0,s.Wm)("code",null,"login",-1),i=(0,s.Uk)(" endpoint"),u=(0,s.Uk)(" to authenticate further requests with a token. Example:"),p=(0,s.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>curl -s -u admin:foobaz http://localhost:3000/api/v1/login|jq\n{\n &quot;data&quot;: {\n  &quot;token&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIxMzI2MDU3MjgzMTA4OTc4NTg1OSJ9.6HSANk3aRleJbAMvfJhUc4grieupRdfU62MMX_L6wEA&quot;\n }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>The token has a default lifetime of 600 seconds(10 minutes). Using the query parameter <code>token-lifetime=3600</code>(in seconds) you can request a defined lifetime.</p><p>Having a valid token you can execute requests, using an <code>Authorization: Bearer: &lt;TOKEN&gt;</code> header. For example.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># Get and store the token\ncurl -s -u admin:foobaz http://localhost:3000/api/v1/login?token-lifetime=3600|jq -r .data.token &gt; .token\n\n# Request using the stored toeken\ncurl -s -H &quot;Authorization: Bearer $(cat .token)&quot; http://localhost:3000/api/v1/clients|jq\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Rportd holds the tokens in memory. Restarting rportd deletes (expires) them all.</p><p>Tokens are based on JWT. For your security, you should enter a unique <code>jwt_secret</code> into the <code>rportd.conf</code>. Do not use the provided sample secret in a production environment.</p><h2 id="storing-credentials-managing-users"><a class="header-anchor" href="#storing-credentials-managing-users">#</a> Storing credentials, managing users</h2><p>The Rportd can read user credentials from three different sources.</p><ol><li>A &quot;hardcoded&quot; single user with a plaintext password</li><li>A user file with bcrypt encoded passwords</li><li>A database table with bcrypt encoded passwords</li></ol><p>Which one you chose is an either-or decision. A mixed-mode is not supported.</p><h3 id="hardcoded-single-user"><a class="header-anchor" href="#hardcoded-single-user">#</a> Hardcoded single user</h3><p>To use just a single user enter the following line to the <code>rportd.config</code> in the <code>[api]</code> section.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>auth = &quot;admin:foobaz&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Quite simple. Now you can log in to the API using the username <code>admin</code> and the password <code>foobaz</code>.</p><h3 id="user-file"><a class="header-anchor" href="#user-file">#</a> User File</h3><p>If you want to have more than one user, create a json file with the following structure.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[\n    {\n        &quot;username&quot;: &quot;Admin&quot;,\n        &quot;password&quot;: &quot;$2y$10$ezwCZekHE/qxMb4g9n6rU.XIIdCnHnOo.q2wqqA8LyYf3ihonenmu&quot;,\n        &quot;groups&quot;: [\n            &quot;Admins&quot;,\n            &quot;Bunnies&quot;\n        ]\n    },\n    {\n        &quot;username&quot;: &quot;Bunny&quot;,\n        &quot;password&quot;: &quot;$2y$10$ezwCZekHE/qxMb4g9n6rU.XIIdCnHnOo.q2wqqA8LyYf3ihonenmu&quot;,\n        &quot;groups&quot;: [\n            &quot;Bunnies&quot;\n        ]\n    }\n]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Using <code>/var/lib/rport/api-auth.json</code> or <code>C:\\Program Files\\rport\\api-auth.json</code> is a good choice.</p><p>Enter the following line to your <code>rportd.config</code> in the <code>[api]</code> section.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>auth_file = &quot;/var/lib/rport/api-auth.json&quot;           # Linux\nauth_file = &#39;C:\\Program Files\\rport\\api-auth.json&#39;   # Windows\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Make sure no other auth option is enabled. Reload rportd to activate the changes.</p><p>The file is read only on start or reload <code>kill -SIGUSR1 &lt;pid&gt;</code>. Changes to the file, while rportd is running, have no effect.</p><p>To generate bcrypt hashes use for example the command <code>htpasswd</code> from the Apache Utils.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>htpasswd -nbB password &#39;Super-Secrete$Passw0rD&#39;\npassword:$2y$05$Wgzg0fwtiCNYfP69k2uYKuYbmmFtd5RPK7W7mkgemuGkfXB2kgcdW\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Copy the second part after the colon to the <code>api-auth.json</code> file. This is the hash of the password.</p>',25),c=(0,s.Uk)("htpasswd.exe for Windows can be extracted from this "),d={href:"https://de.apachehaus.com/downloads/httpd-2.4.46-o111g-x86-vc15.zip",target:"_blank",rel:"noopener noreferrer"},m=(0,s.Uk)("ZIP file"),h=(0,s.Uk)(" or this "),b={href:"https://www.apachelounge.com/download/VS16/binaries/httpd-2.4.46-win64-VS16.zip",target:"_blank",rel:"noopener noreferrer"},g=(0,s.Uk)("ZIP File"),f=(0,s.Uk)(" or use this "),W={href:"https://bcrypt-generator.com/",target:"_blank",rel:"noopener noreferrer"},q=(0,s.Uk)("Online Hash Generator"),v=(0,s.Uk)("."),T=(0,s.uE)('<h3 id="database"><a class="header-anchor" href="#database">#</a> Database</h3><p>If you want to integrate rport into and existing user base or if you want to implement some kind of registration, reading credentials from a database might be handy. Rport has no special demands on the database or the table layout.</p><p>The tables must be created manually.</p><p>Each time a http basic auth request is received, rport executes these two queries.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>SELECT username,password FROM {user-table} WHERE username=&#39;{username}&#39; LIMIT 1;\nSELECT DISTINCT(group) FROM {group-table} WHERE username=&#39;{username}&#39;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>The password must be bcrypt-hashed.</p>',6),x=(0,s.Uk)("To use the database authentication you must setup a global database connection in the "),w=(0,s.Wm)("code",null,"[database]",-1),k=(0,s.Uk)(" section of "),E=(0,s.Wm)("code",null,"rportd.config",-1),y=(0,s.Uk)(" first. Only MySQL/MariaDB and SQLite3 are supported at the moment. The "),A={href:"https://github.com/cloudradar-monitoring/rport/blob/master/rportd.example.conf",target:"_blank",rel:"noopener noreferrer"},U=(0,s.Uk)("example config"),I=(0,s.Uk)(" contains all explanations on how to set up the database connection."),N=(0,s.uE)('<p>Having the database set up, enter the following two lines to the <code>[api]</code> section of the <code>rportd.config</code> to specify the table names.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>auth_user_table = &quot;users&quot;\nauth_group_table = &quot;groups&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Reload rportd to apply all changes.</p><h4 id="examples"><a class="header-anchor" href="#examples">#</a> Examples</h4><p>Some simple example of a table layout. Change column types and lengths to your needs.</p>',5),L=(0,s.Wm)("div",{class:"language-mysql ext-mysql line-numbers-mode"},[(0,s.Wm)("pre",{class:"language-mysql"},[(0,s.Wm)("code",null,"CREATE TABLE `users` (\n  `username` varchar(150) NOT NULL,\n  `password` varchar(255) NOT NULL,\n  UNIQUE KEY `username` (`username`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\nCREATE TABLE `groups` (\n  `username` varchar(150) NOT NULL,\n  `group` varchar(150) NOT NULL,\n  UNIQUE KEY `username_group` (`username`,`group`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n")]),(0,s.Wm)("div",{class:"line-numbers"},[(0,s.Wm)("span",{class:"line-number"},"1"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"2"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"3"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"4"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"5"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"6"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"7"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"8"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"9"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"10"),(0,s.Wm)("br")])],-1),C=(0,s.Wm)("div",{class:"language-sqlite ext-sqlite line-numbers-mode"},[(0,s.Wm)("pre",{class:"language-sqlite"},[(0,s.Wm)("code",null,'CREATE TABLE "users" (\n  "username" TEXT(150) NOT NULL,\n  "password" TEXT(255) NOT NULL\n);\nCREATE UNIQUE INDEX "main"."username"\nON "users" (\n  "username" ASC\n);\nCREATE TABLE "groups" (\n  "username" TEXT(150) NOT NULL,\n  "group" TEXT(150) NOT NULL\n);\nCREATE UNIQUE INDEX "main"."username_group"\nON "groups" (\n  "username" ASC,\n  "group" ASC\n);\n')]),(0,s.Wm)("div",{class:"line-numbers"},[(0,s.Wm)("span",{class:"line-number"},"1"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"2"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"3"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"4"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"5"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"6"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"7"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"8"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"9"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"10"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"11"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"12"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"13"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"14"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"15"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"16"),(0,s.Wm)("br"),(0,s.Wm)("span",{class:"line-number"},"17"),(0,s.Wm)("br")])],-1),R={render:function(e,n){const a=(0,s.up)("OutboundLink"),R=(0,s.up)("CodeGroupItem"),S=(0,s.up)("CodeGroup");return(0,s.wg)(),(0,s.j4)(s.HY,null,[t,(0,s.Wm)("p",null,[r,(0,s.Wm)("a",o,[l,i,(0,s.Wm)(a)]),u]),p,(0,s.Wm)("p",null,[c,(0,s.Wm)("a",d,[m,(0,s.Wm)(a)]),h,(0,s.Wm)("a",b,[g,(0,s.Wm)(a)]),f,(0,s.Wm)("a",W,[q,(0,s.Wm)(a)]),v]),T,(0,s.Wm)("p",null,[x,w,k,E,y,(0,s.Wm)("a",A,[U,(0,s.Wm)(a)]),I]),N,(0,s.Wm)(S,null,{default:(0,s.w5)((()=>[(0,s.Wm)(R,{title:"MySQL"},{default:(0,s.w5)((()=>[L])),_:1}),(0,s.Wm)(R,{title:"SQLite3"},{default:(0,s.w5)((()=>[C])),_:1})])),_:1})],64)}}}}]);
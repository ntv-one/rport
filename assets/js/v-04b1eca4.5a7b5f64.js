(self.webpackChunkrport_site=self.webpackChunkrport_site||[]).push([[443],{4854:(n,e,s)=>{"use strict";s.r(e),s.d(e,{data:()=>a});const a={key:"v-04b1eca4",path:"/docs/no06-command-execution.html",title:"Command execution",lang:"en-DE",frontmatter:{},excerpt:"",headers:[{level:2,title:"Execute on a single host",slug:"execute-on-a-single-host",children:[]},{level:2,title:"Execute on multiple hosts",slug:"execute-on-multiple-hosts",children:[{level:3,title:"By client IDs",slug:"by-client-ids",children:[]},{level:3,title:"By client group IDs",slug:"by-client-group-ids",children:[]}]},{level:2,title:"Securing your environment",slug:"securing-your-environment",children:[]}],filePathRelative:"docs/no06-command-execution.md"}},7975:(n,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>h});var a=s(6252);const t=(0,a.Wm)("h1",{id:"command-execution"},[(0,a.Wm)("a",{class:"header-anchor",href:"#command-execution"},"#"),(0,a.Uk)(" Command execution")],-1),l=(0,a.Wm)("p",null,"Via the API you can execute a command on connected clients. The command and the response are transferred through the web socket connection. A tunnel is not needed.",-1),u=(0,a.Wm)("p",null,"Command can be executed via:",-1),o={href:"https://petstore.swagger.io/?url=https://raw.githubusercontent.com/cloudradar-monitoring/rport/master/api-doc.yml#/Commands",target:"_blank",rel:"noopener noreferrer"},r=(0,a.Uk)("REST API"),i={href:"https://petstore.swagger.io/?url=https://raw.githubusercontent.com/cloudradar-monitoring/rport/master/api-doc.yml#/Commands/get_ws_commands",target:"_blank",rel:"noopener noreferrer"},c=(0,a.Uk)("WebSocket API"),p=(0,a.uE)('<p>Here we would show examples how to do it via REST API.</p><h2 id="execute-on-a-single-host"><a class="header-anchor" href="#execute-on-a-single-host">#</a> Execute on a single host</h2><p>Example:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>CLIENTID=my-client\ncurl -s -u admin:foobaz http://localhost:3000/api/v1/clients/$CLIENTID/commands -H &quot;Content-Type: application/json&quot; -X POST \\\n--data-raw &#39;{\n  &quot;command&quot;: &quot;date&quot;,\n  &quot;timeout_sec&quot;: 10\n}&#39;|jq\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>You will get back a job id. Now execute a query to get the result of the command.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>JOBID=f72b69fd-f418-40c3-ab62-4ce2c2022c58\ncurl -s -u admin:foobaz http://localhost:3000/api/v1/clients/$CLIENTID/commands/$JOBID|jq\n{\n    &quot;data&quot;: {\n        &quot;jid&quot;: &quot;f72b69fd-f418-40c3-ab62-4ce2c2022c58&quot;,\n        &quot;status&quot;: &quot;successful&quot;,\n        &quot;finished_at&quot;: &quot;2020-10-15T15:30:12.937267522Z&quot;,\n        &quot;client_id&quot;: &quot;my-client&quot;,\n        &quot;command&quot;: &quot;date&quot;,\n        &quot;shell&quot;: &quot;/bin/sh&quot;,\n        &quot;pid&quot;: 908526,\n        &quot;started_at&quot;: &quot;2020-10-15T15:30:12.934238782Z&quot;,\n        &quot;created_by&quot;: &quot;admin&quot;,\n        &quot;timeout_sec&quot;: 10,\n        &quot;result&quot;: {\n            &quot;stdout&quot;: &quot;Thu Oct 15 15:30:12 UTC 2020\\n&quot;,\n            &quot;stderr&quot;: &quot;&quot;\n        }\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>The rport client supervises the command for the given {timeout_sec} seconds. If the timeout is exceeded the command state is considered &#39;unknown&#39; but the command keeps running.</p><h2 id="execute-on-multiple-hosts"><a class="header-anchor" href="#execute-on-multiple-hosts">#</a> Execute on multiple hosts</h2><p>It can be done by using:</p><ul><li>client IDs</li><li>group IDs</li><li>both client IDs and group IDs</li></ul><p>Execution options:</p><ul><li><code>execute_concurrently</code>. By default, commands are not executed concurrently. To execute it concurrently set it to <code>true</code> in a request.</li><li><code>abort_on_error</code>. By default, if the execution fails on some client, the entire cycle is aborted. But it is ignored in parallel mode when <code>&quot;execute concurrently&quot;: true</code>. Disabling <code>abort_on_error</code> executes the command on all clients regardless there is an error or not.</li></ul><h3 id="by-client-ids"><a class="header-anchor" href="#by-client-ids">#</a> By client IDs</h3><p>Example:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>curl -s -u admin:foobaz http://localhost:3000/api/v1/commands -H &quot;Content-Type: application/json&quot; -X POST \\\n--data-raw &#39;{\n  &quot;command&quot;: &quot;/bin/date&quot;,\n  &quot;client_ids&quot;: [&quot;local-test-client-2&quot;, &quot;local-test-client-3&quot;, &quot;local-test-client-4&quot;],\n  &quot;timeout_sec&quot;: 30,\n  &quot;execute_concurrently&quot;: true\n}\n&#39;|jq\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>You will get back a job id. Now execute a query to get the result of the command.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>JOBID=f206854c-af1d-4589-9adc-bdf3553ec68b\ncurl -s -u admin:foobaz http://localhost:3000/api/v1/commands/$JOBID|jq\n{\n  &quot;data&quot;: {\n    &quot;jid&quot;: &quot;f206854c-af1d-4589-9adc-bdf3553ec68b&quot;,\n    &quot;started_at&quot;: &quot;2021-01-28T19:39:16.197965+02:00&quot;,\n    &quot;created_by&quot;: &quot;admin&quot;,\n    &quot;client_ids&quot;: [\n      &quot;local-test-client-2&quot;,\n      &quot;local-test-client-3&quot;,\n      &quot;local-test-client-4&quot;\n    ],\n    &quot;group_ids&quot;: null,\n    &quot;command&quot;: &quot;/bin/date&quot;,\n    &quot;shell&quot;: &quot;&quot;,\n    &quot;timeout_sec&quot;: 30,\n    &quot;concurrent&quot;: true,\n    &quot;abort_on_err&quot;: false,\n    &quot;jobs&quot;: [\n      {\n        &quot;jid&quot;: &quot;4012fcf8-0dfc-44c4-a3de-de1b133bb13e&quot;,\n        &quot;status&quot;: &quot;successful&quot;,\n        &quot;finished_at&quot;: &quot;2021-01-28T19:39:16.227685+02:00&quot;,\n        &quot;client_id&quot;: &quot;local-test-client-2&quot;,\n        &quot;command&quot;: &quot;/bin/date&quot;,\n        &quot;shell&quot;: &quot;/bin/sh&quot;,\n        &quot;pid&quot;: 16242,\n        &quot;started_at&quot;: &quot;2021-01-28T19:39:16.203396+02:00&quot;,\n        &quot;created_by&quot;: &quot;admin&quot;,\n        &quot;timeout_sec&quot;: 30,\n        &quot;multi_job_id&quot;: &quot;f206854c-af1d-4589-9adc-bdf3553ec68b&quot;,\n        &quot;result&quot;: {\n          &quot;stdout&quot;: &quot;Thu Jan 28 19:39:16 EET 2021\\n&quot;,\n          &quot;stderr&quot;: &quot;&quot;\n        }\n      },\n      {\n        &quot;jid&quot;: &quot;7b8d90a0-f100-4922-98e6-4da46853c020&quot;,\n        &quot;status&quot;: &quot;successful&quot;,\n        &quot;finished_at&quot;: &quot;2021-01-28T19:39:16.229916+02:00&quot;,\n        &quot;client_id&quot;: &quot;local-test-client-3&quot;,\n        &quot;command&quot;: &quot;/bin/date&quot;,\n        &quot;shell&quot;: &quot;/bin/sh&quot;,\n        &quot;pid&quot;: 16241,\n        &quot;started_at&quot;: &quot;2021-01-28T19:39:16.203738+02:00&quot;,\n        &quot;created_by&quot;: &quot;admin&quot;,\n        &quot;timeout_sec&quot;: 30,\n        &quot;multi_job_id&quot;: &quot;f206854c-af1d-4589-9adc-bdf3553ec68b&quot;,\n        &quot;result&quot;: {\n          &quot;stdout&quot;: &quot;Thu Jan 28 19:39:16 EET 2021\\n&quot;,\n          &quot;stderr&quot;: &quot;&quot;\n        }\n      },\n      {\n        &quot;jid&quot;: &quot;bb936408-8c02-49b2-a0ac-2750ac44026c&quot;,\n        &quot;status&quot;: &quot;successful&quot;,\n        &quot;finished_at&quot;: &quot;2021-01-28T19:39:16.228102+02:00&quot;,\n        &quot;client_id&quot;: &quot;local-test-client-4&quot;,\n        &quot;command&quot;: &quot;/bin/date&quot;,\n        &quot;shell&quot;: &quot;/bin/sh&quot;,\n        &quot;pid&quot;: 16243,\n        &quot;started_at&quot;: &quot;2021-01-28T19:39:16.204308+02:00&quot;,\n        &quot;created_by&quot;: &quot;admin&quot;,\n        &quot;timeout_sec&quot;: 30,\n        &quot;multi_job_id&quot;: &quot;f206854c-af1d-4589-9adc-bdf3553ec68b&quot;,\n        &quot;result&quot;: {\n          &quot;stdout&quot;: &quot;Thu Jan 28 19:39:16 EET 2021\\n&quot;,\n          &quot;stderr&quot;: &quot;&quot;\n        }\n      }\n    ]\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br></div></div><h3 id="by-client-group-ids"><a class="header-anchor" href="#by-client-group-ids">#</a> By client group IDs</h3>',18),b=(0,a.Uk)("How to create client groups please see "),m=(0,a.Uk)("the link"),d=(0,a.Uk)("."),q=(0,a.uE)('<p>Assume we have already created a client group with <code>group-1</code> id. Example:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>curl -s -u admin:foobaz http://localhost:3000/api/v1/commands -H &quot;Content-Type: application/json&quot; -X POST \\\n--data-raw &#39;{\n  &quot;command&quot;: &quot;/bin/date&quot;,\n  &quot;group_ids&quot;: [&quot;group-1&quot;],\n  &quot;execute_concurrently&quot;: false,\n  &quot;abort_on_error&quot;: true\n}\n&#39;|jq\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>You will get back a job id. Now execute the same query that is in a previous example to get the result of the command.</p><h2 id="securing-your-environment"><a class="header-anchor" href="#securing-your-environment">#</a> Securing your environment</h2><p>The commands are executed from the account that runs rport. On Linux this by default an unprivileged user. Do not run rport as root. On Windows, rport runs as a local service account that by default has administrative rights.</p><p>On the client using the <code>rport.conf</code> you can configure and limit the execution of remote commands.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[remote-commands]\n## Enable or disable remote commands.\n## Defaults: true\n#enabled = true\n\n## Allow commands matching the following regular expressions.\n## The filter is applied to the command sent. Full path must be used.\n## See {order} parameter for more details how it&#39;s applied together with {deny}.\n## Defaults: [&#39;^/usr/bin/.*&#39;,&#39;^/usr/local/bin/.*&#39;,&#39;^C:\\\\Windows\\\\System32\\\\.*&#39;]\n#allow = [&#39;^/usr/bin/.*&#39;,&#39;^/usr/local/bin/.*&#39;,&#39;^C:\\\\Windows\\\\System32\\\\.*&#39;]\n\n## Deny commands matching one of the following regular expressions.\n## The filter is applied to the command sent. Full path must be used.\n## See {order} parameter for more details how it&#39;s applied together with {allow}.\n## With the below default filter only single commands are allowed.\n## Defaults: [&#39;(\\||&lt;|&gt;|;|,|\\n|&amp;)&#39;]\n#deny = [&#39;(\\||&lt;|&gt;|;|,|\\n|&amp;)&#39;]\n\n## Order: [&#39;allow&#39;,&#39;deny&#39;] or [&#39;deny&#39;,&#39;allow&#39;]. Order of which filter is applied first.\n## Defaults: [&#39;allow&#39;,&#39;deny&#39;]\n##\n## order: [&#39;allow&#39;,&#39;deny&#39;]\n## First, all allow directives are evaluated; at least one must match, or the command is rejected.\n## Next, all deny directives are evaluated. If any matches, the command is rejected.\n## Last, any commands which do not match an allow or a deny directive are denied by default.\n## Example:\n## allow: [&#39;^/usr/bin/.*&#39;]\n## deny: [&#39;^/usr/bin/zip&#39;]\n## All commands in /usr/bin except &#39;/usr/bin/zip&#39; can be executed. Full path must be used.\n##\n## order: [&#39;deny&#39;,&#39;allow&#39;]\n## First, all deny directives are evaluated; if any match,\n## the command is denied UNLESS it also matches an allow directive.\n## Any command which do not match any allow or deny directives are permitted.\n## Example:\n## deny: [&#39;.*&#39;]\n## allow: [&#39;zip$&#39;]\n## All commands are denied except those ending in zip.\n##\n#order = [&#39;allow&#39;,&#39;deny&#39;]\n\n## Limit the maximum length of the command output that is sent back.\n## Applies to the stdout and stderr separately.\n## If exceeded {send_back_limit} bytes are sent.\n## Defaults: 2048\n#send_back_limit = 2048\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p><strong>Examples:</strong></p><p>On Linux only allow commands in <code>/usr/bin</code> and <code>/usr/local/bin</code> and command prefixed with <code>sudo -n</code>.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>allow = [\n    &#39;^\\/usr\\/bin\\/.*&#39;,\n    &#39;^\\/usr\\/local\\/bin\\/.*&#39;,\n    &#39;^sudo -n .*&#39;\n]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>On Windows try this</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>allow = [\n    &#39;^C:\\\\Windows\\\\System32.*&#39;,\n    &#39;^C:\\\\Users\\\\Administrator\\\\scripts\\\\.*\\.bat&#39;\n]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Using the above examples requires sending commands with a full path.</p>',13),h={render:function(n,e){const s=(0,a.up)("OutboundLink"),h=(0,a.up)("RouterLink");return(0,a.wg)(),(0,a.j4)(a.HY,null,[t,l,u,(0,a.Wm)("ul",null,[(0,a.Wm)("li",null,[(0,a.Wm)("a",o,[r,(0,a.Wm)(s)])]),(0,a.Wm)("li",null,[(0,a.Wm)("a",i,[c,(0,a.Wm)(s)])])]),p,(0,a.Wm)("p",null,[b,(0,a.Wm)(h,{to:"/docs/no04-client-groups.html"},{default:(0,a.w5)((()=>[m])),_:1}),d]),q],64)}}}}]);
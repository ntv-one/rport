(self.webpackChunkrport_site=self.webpackChunkrport_site||[]).push([[342],{3441:(e,n,t)=>{"use strict";t.r(n),t.d(n,{data:()=>s});const s={key:"v-253d3c8e",path:"/docs/no08-https-howto.html",title:"Securing the Rportd API with HTTPS",lang:"en-DE",frontmatter:{},excerpt:"",headers:[],filePathRelative:"docs/no08-https-howto.md"}},8999:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const s=(0,t(6252).uE)('<h1 id="securing-the-rportd-api-with-https"><a class="header-anchor" href="#securing-the-rportd-api-with-https">#</a> Securing the Rportd API with HTTPS</h1><p>Rportd supports HTTPS without the need for a reverse proxy. Open the <code>rportd.conf</code> file and enter the path to a certificate or certificate chain and a server key. The key must not be password protected.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[api]\n  ## Defines the IP address and port the API server listens on\n  ## specify non-empty {address} to enable API support\n  address = &quot;0.0.0.0:3000&quot;\n  ## ..snip ...snap\n  ## If both cert_file and key_file are specified, then rportd will use them to serve the API with https.\n  ## Intermediate certificates should be included in cert_file if required.\n  #cert_file = &quot;/var/lib/rport/server.crt&quot;\n  #key_file = &quot;/var/lib/rport/server.key&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>If a <code>cert_file</code> and a <code>key_file</code> are specified, the protocol automatically switches from HTTP to HTTPs.</p><p>If the IP address of your server has a public domain name you can generate a free certificate quite easily using Let&#39;s encrypt.</p><p>Make sure no other software is using the TCP port 80 during the certificate generation and your firewall is not blocking access to TCP 80.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>DOMAIN=&lt;YOUR_DOMAIN&gt;\napt install certbot\ncertbot certonly -d $DOMAIN -n --agree-tos --standalone -m &lt;YOUR_EMAIL&gt;\n# Change group ownerships so rport can read the files\nchgrp rport /etc/letsencrypt/archive/\nchmod g+rx /etc/letsencrypt/archive/\nchgrp rport /etc/letsencrypt/live/\nchmod g+rx /etc/letsencrypt/live/\nchgrp rport /etc/letsencrypt/archive/$DOMAIN/\nchmod g+rx /etc/letsencrypt/archive/$DOMAIN/\nchgrp rport /etc/letsencrypt/archive/$DOMAIN/privkey1.pem\nchmod g+rx /etc/letsencrypt/archive/$DOMAIN/privkey1.pem\nchgrp rport /etc/letsencrypt/live/$DOMAIN/\nls -l /etc/letsencrypt/live/$DOMAIN/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>This will create the server key, certificates, and chains in <code>/etc/letsencrypt/live/$DOMAIN/</code>. Note that the files and folders generated by certbot are readable only by root. So change your ownerships accordingly.</p><p>Now set up your <code>rportd.conf</code> like this.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[api]\n  ## Defines the IP address and port the API server listens on\n  ## specify non-empty {address} to enable API support\n  address = &quot;0.0.0.0:3000&quot;\n  ## ..snip ...snap\n  ## If both cert_file and key_file are specified, then rportd will use them to serve the API with https.\n  ## Intermediate certificates should be included in cert_file if required.\n  cert_file = &quot;/etc/letsencrypt/live/&lt;YOUR_DOMAIN&gt;/fullchain.pem&quot;\n  key_file = &quot;/etc/letsencrypt/live/&lt;YOUR_DOMAIN&gt;/privkey.pem&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Restart rportd after any changes to the configuration file. Check your SSL setup is working properly by executing <code>curl -Iv -u admin:foobaz https://$DOMAIN:3000/api/v1/status</code>. You should not get any errors.</p><p>On Ubuntu a systemd timer to renew the certificates every 12 hours is created on the installation of the certbot package. For details look at <code>/etc/systemd/system/timers.target.wants/certbot.timer</code>. On other distribution you might set up a cron manually that executes <code>certbot -q renew</code> every 12 hours.</p>',12),r={render:function(e,n){return s}}}}]);